class Solution {
public:

    bool dfs(string &word, std::set<string>&visited, std::unordered_map<string, std::vector<string>> &sm, string &wordToMatch){
        visited.insert(word);
        if(word == wordToMatch){
            return true;
       }
        for(auto &w : sm[word]){
            if(visited.find(w) == visited.end()){
                if(dfs(w, visited, sm, wordToMatch)){
                    return true;
                }
            }
        }
        return false;
    }
    bool areSentencesSimilarTwo(vector<string>& sentence1, vector<string>& sentence2, vector<vector<string>>& similarPairs) {

        if(sentence1.size() != sentence2.size()){
            return false;
        }
        
        std::unordered_map<string, std::vector<string>> similarWords;

        for(auto &s : similarPairs){
            similarWords[s[0]].push_back(s[1]);
            similarWords[s[1]].push_back(s[0]);
        }
    
        for(int i = 0; i < sentence1.size(); i++){
            bool found = false;
            std::set<string> visited;
            if(sentence1[i] == sentence2[i]){
                continue;
            }

            found = dfs(sentence1[i], visited, similarWords, sentence2[i]);
            
            if(!found){
                return false;
            }
        }
        return true;
    }
};
