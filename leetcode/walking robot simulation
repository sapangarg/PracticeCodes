class Solution {
public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        
        pair<int,int> start{0,0};
        std::set<pair<int,int>> obstacle;
        for(auto &o : obstacles) {
            obstacle.insert({o[0], o[1]});
        }
        int direction = 0, maxDist = 0; 
        std::vector<std::vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        for(auto c : commands){
            switch(c){
                case -1 : direction = (direction + 1) % 4;
                          break;
                case -2 : direction = (direction + 3) % 4;
                          break;
                default : {
                    vector<int> currDirection = directions[direction];
                for(auto i = 0; i < c; i++) {
                    int nextX = start.first + currDirection[0];
                    int nextY = start.second + currDirection[1];
                   
                    if(obstacle.find({nextX,nextY}) != obstacle.end()) {
                        break;
                    }
                    start = {nextX, nextY};
                }
                 
                maxDist = max(maxDist, start.first*start.first + start.second * start.second);
                break;
                }
            }
        }

        return maxDist;

    }
};
