/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int count = 0;
    int averageOfSubtree(TreeNode* root) {
       
        countNodesEqualToAverage(root, 0);
        return count;
    }

    pair<int,int> countNodesEqualToAverage(TreeNode* root, int nodeCount) {
        if(root == NULL){
            return{0,0};
        }


        if(root->left == NULL && root->right == NULL) {
            count++;
            cout<<root->val;
            return {root->val,nodeCount+1};
        }

        pair<int,int> left = countNodesEqualToAverage(root->left, nodeCount);
        pair<int,int> right = countNodesEqualToAverage(root->right, nodeCount);

        int sum = left.first + right.first + root->val;
        int nodeCountSoFar = (left.second + right.second + 1);
        int average = sum /nodeCountSoFar ;
        
       
        if(average == root->val){
            count++;
        }
        cout<<root->val;
        return {sum, nodeCountSoFar};

      }
    
};
